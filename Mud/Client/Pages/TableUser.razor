@page "/tableusers"

@using Microsoft.AspNetCore.Components;
@using Mud.Client.Models;
@using Mud.Client.Utilitis;
@inject ISnackbar Snackbar

<MudTable Items="@Users" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<User,bool>(FilterFunc)" @bind-SelectedItem="selectedItem1" SortLabel="Sort By"
          CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Username)">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Email)">Sign</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Username">@context.Username</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
    </RowTemplate>
    <RowEditingTemplate>

        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
        <MudTd DataLabel="Username">
            <MudTextField @bind-Value="@context.Username" Required />
        </MudTd>
        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="@context.Email" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
<MudSwitch @bind-Checked="@canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
<MudText Inline="true">Selected1: @selectedItem1?.Name</MudText>
<MudText Inline="true">Selected2: @selectedItem2?.Name</MudText>

<MudExpansionPanels Style="flex: 1;">
    <MudExpansionPanel Text="Show inline-edit event log">
        @foreach (var message in editEvents)
        {
            <MudText>@message</MudText>
        }
        @if (editEvents.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code{
    [Inject]
    public GenerarInfo Utilitis { get; set; }

    public User User = new User();
    private List<string> editEvents = new();
    private bool dense = false; //espacio vertical
    private bool hover = true; // selecion sobre fila
    private bool ronly = false; //permitir edicion
    private bool canCancelEdit = false;  //Edicion
    private string searchString = ""; //input de busqueda
    private User selectedItem1 = null;
    private User selectedItem2 = null;
    private User elementBeforeEdit;
    private HashSet<User> selectedItems1 = new HashSet<User>();
    private HashSet<User> selectedItems2 = new HashSet<User>();

    private IEnumerable<User> Users = new List<User>();

    protected override void OnInitialized()
    {
        Users = Utilitis.FakeInfo();
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Username = ((User)element).Username,
            Name = ((User)element).Name,
            Email = ((User)element).Email

        };
        AddEditionEvent($"RowEditPreview event: made a backup of User {((User)element).Name}");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to  {((User)element).Name} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((User)element).Name = elementBeforeEdit.Name;
        ((User)element).Username = elementBeforeEdit.Username;
        ((User)element).Email = elementBeforeEdit.Email;
        AddEditionEvent($"RowEditCancel event: Editing of User {((User)element).Name} cancelled");
    }

    private bool FilterFunc(User user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{user.Email} {user.Username} {user.Email}".Contains(searchString))
            return true;
        return false;
    }
}